{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  const animations = [];\n  console.log(array);\n  if (array.length <= 1) return array;\n  quickSortHelper(array, 0, array.length - 1, animations);\n  console.log(array);\n  return animations;\n}\n\nfunction quickSortHelper(array, left, right, animations) {\n  if (left < right) {\n    let partitionIndex = partiton(array, left, right, animations);\n    quickSortHelper(array, left, partitionIndex - 1, animations);\n    quickSortHelper(array, partitionIndex + 1, right, animations);\n  }\n}\n\nfunction partiton(array, left, right, animations) {\n  let pivot = array[right];\n  let i = left - 1;\n\n  for (let j = left; j < right; j++) {\n    animations.push([j, right]);\n    animations.push([j, right]);\n\n    if (array[j] <= pivot) {\n      i++;\n      let swappedVal = array[i];\n      animations.push([i, array[j]]);\n      array[i] = array[j];\n      animations.push([j, swappedVal]);\n      array[j] = swappedVal;\n    } else {\n      animations.push([j, array[j]]);\n      animations.push([j, array[j]]);\n    } // exit for loop check for pivot animation\n\n\n    if (j !== right - 1) {\n      animations.push([j, array[j]]);\n      animations.push([j, array[j]]);\n    }\n  } // swap the pivot\n\n\n  let swappedVal = array[i + 1];\n  animations.push([i + 1, array[right]]);\n  array[i + 1] = array[right];\n  animations.push([right, swappedVal]);\n  array[right] = swappedVal;\n  return i + 1;\n}","map":{"version":3,"sources":["C:/Users/lbr20/Desktop/blr-portfolio/src/projects/sortingVisualizer/src/SortingAlgorithms/QuickSort.js"],"names":["getQuickSortAnimations","array","animations","console","log","length","quickSortHelper","left","right","partitionIndex","partiton","pivot","i","j","push","swappedVal"],"mappings":"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","sourcesContent":["export function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  console.log(array);\r\n  if (array.length <= 1) return array;\r\n  quickSortHelper(array, 0, array.length - 1, animations);\r\n  console.log(array);\r\n  return animations;\r\n}\r\n\r\nfunction quickSortHelper(array, left, right, animations) {\r\n  if (left < right) {\r\n    let partitionIndex = partiton(array, left, right, animations);\r\n    quickSortHelper(array, left, partitionIndex - 1, animations);\r\n    quickSortHelper(array, partitionIndex + 1, right, animations);\r\n  }\r\n}\r\n\r\nfunction partiton(array, left, right, animations) {\r\n  let pivot = array[right];\r\n  let i = left - 1;\r\n\r\n  for (let j = left; j < right; j++) {\r\n    animations.push([j, right]);\r\n    animations.push([j, right]);\r\n    if (array[j] <= pivot) {\r\n      i++;\r\n\r\n      let swappedVal = array[i];\r\n      animations.push([i, array[j]]);\r\n      array[i] = array[j];\r\n      animations.push([j, swappedVal]);\r\n      array[j] = swappedVal;\r\n    } else {\r\n      animations.push([j, array[j]]);\r\n      animations.push([j, array[j]]);\r\n    }\r\n    // exit for loop check for pivot animation\r\n    if (j !== right - 1) {\r\n      animations.push([j, array[j]]);\r\n      animations.push([j, array[j]]);\r\n    }\r\n  }\r\n\r\n  // swap the pivot\r\n  let swappedVal = array[i + 1];\r\n  animations.push([i + 1, array[right]]);\r\n  array[i + 1] = array[right];\r\n  animations.push([right, swappedVal]);\r\n  array[right] = swappedVal;\r\n\r\n  return i + 1;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}