{"ast":null,"code":"export function getShellSortAnimations(array) {\n  const animations = [];\n  console.log(array);\n  if (array.length <= 1) return array;\n  ShellSortHelper(array, array.length, animations);\n  console.log(array);\n  return animations;\n}\n\nfunction ShellSortHelper(array, length, animations) {\n  for (let gap = Math.floor(length / 2); gap > 0; gap = Math.floor(gap / 2)) {\n    for (let i = gap; i < length; i++) {\n      let targetValue = array[i];\n      let j;\n      let animateFlag = 0;\n      animations.push([i, gap]);\n      animations.push([i, gap]);\n\n      for (j = i; j >= gap && array[j - gap] > targetValue; j -= gap) {\n        if (animateFlag > 0) {\n          animations.push([i, gap]);\n          animations.push([i, gap]);\n        }\n\n        animations.push([j, array[j - gap]]);\n        array[j] = array[j - gap];\n        animations.push([j - gap, targetValue]);\n        array[j - gap] = targetValue;\n        animateFlag++;\n      }\n\n      if (animateFlag === 0) {\n        animations.push([j, array[j]]);\n        animations.push([j, array[j]]);\n      } //array[j] = targetValue;\n\n    }\n  }\n  /* if (length % 2 != 0) { // check for uneven array \r\n    animations.push([0, 0]);\r\n    animations.push([0, 0]);\r\n    animations.push([0, 0]);\r\n  }*/\n\n}","map":{"version":3,"sources":["C:/Users/lbr20/Desktop/blr-portfolio/src/projects/sortingVisualizer/src/SortingAlgorithms/ShellSort.js"],"names":["getShellSortAnimations","array","animations","console","log","length","ShellSortHelper","gap","Math","floor","i","targetValue","j","animateFlag","push"],"mappings":"AAAA,OAAO,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AAC5C,QAAMC,UAAU,GAAG,EAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,MAAIA,KAAK,CAACI,MAAN,IAAgB,CAApB,EAAuB,OAAOJ,KAAP;AACvBK,EAAAA,eAAe,CAACL,KAAD,EAAQA,KAAK,CAACI,MAAd,EAAsBH,UAAtB,CAAf;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,SAAOC,UAAP;AACD;;AAED,SAASI,eAAT,CAAyBL,KAAzB,EAAgCI,MAAhC,EAAwCH,UAAxC,EAAoD;AAClD,OAAK,IAAIK,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWJ,MAAM,GAAG,CAApB,CAAf,EAAuCE,GAAG,GAAG,CAA7C,EAAgDA,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,CAAjB,CAAtD,EAA2E;AACzE,SAAK,IAAIG,CAAC,GAAGH,GAAb,EAAkBG,CAAC,GAAGL,MAAtB,EAA8BK,CAAC,EAA/B,EAAmC;AACjC,UAAIC,WAAW,GAAGV,KAAK,CAACS,CAAD,CAAvB;AACA,UAAIE,CAAJ;AACA,UAAIC,WAAW,GAAG,CAAlB;AAEAX,MAAAA,UAAU,CAACY,IAAX,CAAgB,CAACJ,CAAD,EAAIH,GAAJ,CAAhB;AACAL,MAAAA,UAAU,CAACY,IAAX,CAAgB,CAACJ,CAAD,EAAIH,GAAJ,CAAhB;;AAEA,WAAKK,CAAC,GAAGF,CAAT,EAAYE,CAAC,IAAIL,GAAL,IAAYN,KAAK,CAACW,CAAC,GAAGL,GAAL,CAAL,GAAiBI,WAAzC,EAAsDC,CAAC,IAAIL,GAA3D,EAAgE;AAC9D,YAAIM,WAAW,GAAG,CAAlB,EAAqB;AACnBX,UAAAA,UAAU,CAACY,IAAX,CAAgB,CAACJ,CAAD,EAAIH,GAAJ,CAAhB;AACAL,UAAAA,UAAU,CAACY,IAAX,CAAgB,CAACJ,CAAD,EAAIH,GAAJ,CAAhB;AACD;;AAEDL,QAAAA,UAAU,CAACY,IAAX,CAAgB,CAACF,CAAD,EAAIX,KAAK,CAACW,CAAC,GAAGL,GAAL,CAAT,CAAhB;AACAN,QAAAA,KAAK,CAACW,CAAD,CAAL,GAAWX,KAAK,CAACW,CAAC,GAAGL,GAAL,CAAhB;AACAL,QAAAA,UAAU,CAACY,IAAX,CAAgB,CAACF,CAAC,GAAGL,GAAL,EAAUI,WAAV,CAAhB;AACAV,QAAAA,KAAK,CAACW,CAAC,GAAGL,GAAL,CAAL,GAAiBI,WAAjB;AAEAE,QAAAA,WAAW;AACZ;;AAED,UAAIA,WAAW,KAAK,CAApB,EAAuB;AACrBX,QAAAA,UAAU,CAACY,IAAX,CAAgB,CAACF,CAAD,EAAIX,KAAK,CAACW,CAAD,CAAT,CAAhB;AACAV,QAAAA,UAAU,CAACY,IAAX,CAAgB,CAACF,CAAD,EAAIX,KAAK,CAACW,CAAD,CAAT,CAAhB;AACD,OAzBgC,CA0BjC;;AACD;AACF;AACD;;;;;;AAKD","sourcesContent":["export function getShellSortAnimations(array) {\r\n  const animations = [];\r\n  console.log(array);\r\n  if (array.length <= 1) return array;\r\n  ShellSortHelper(array, array.length, animations);\r\n  console.log(array);\r\n  return animations;\r\n}\r\n\r\nfunction ShellSortHelper(array, length, animations) {\r\n  for (let gap = Math.floor(length / 2); gap > 0; gap = Math.floor(gap / 2)) {\r\n    for (let i = gap; i < length; i++) {\r\n      let targetValue = array[i];\r\n      let j;\r\n      let animateFlag = 0;\r\n\r\n      animations.push([i, gap]);\r\n      animations.push([i, gap]);\r\n\r\n      for (j = i; j >= gap && array[j - gap] > targetValue; j -= gap) {\r\n        if (animateFlag > 0) {\r\n          animations.push([i, gap]);\r\n          animations.push([i, gap]);\r\n        }\r\n\r\n        animations.push([j, array[j - gap]]);\r\n        array[j] = array[j - gap];\r\n        animations.push([j - gap, targetValue]);\r\n        array[j - gap] = targetValue;\r\n\r\n        animateFlag++;\r\n      }\r\n\r\n      if (animateFlag === 0) {\r\n        animations.push([j, array[j]]);\r\n        animations.push([j, array[j]]);\r\n      }\r\n      //array[j] = targetValue;\r\n    }\r\n  }\r\n  /* if (length % 2 != 0) { // check for uneven array \r\n    animations.push([0, 0]);\r\n    animations.push([0, 0]);\r\n    animations.push([0, 0]);\r\n  }*/\r\n}\r\n"]},"metadata":{},"sourceType":"module"}