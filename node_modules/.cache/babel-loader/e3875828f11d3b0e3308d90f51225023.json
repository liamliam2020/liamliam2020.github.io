{"ast":null,"code":"export function getBubbleSortAnimations(array){var animations=[];if(array.length<=1)return array;//const auxiliaryArray = array.slice();\nbubbleSortHelper(array,array.length-1,animations);return animations;}function bubbleSortHelper(array,endIndex,animations){for(var i=0;i<endIndex;i++){for(var j=0;j<endIndex-i;j++){animations.push([j,j+1]);animations.push([j,j+1]);// swap array[j+1] with arr[i+1] if adjacent is larger\nif(array[j]>array[j+1]){var swappedVal=array[j];animations.push([j,array[j+1]]);array[j]=array[j+1];animations.push([j+1,swappedVal]);array[j+1]=swappedVal;}else{animations.push([j,array[j]]);animations.push([j+1,array[j+1]]);}}}}","map":{"version":3,"sources":["C:/Users/lbr20/Desktop/blr-portfolio/src/projects/sortingVisualizer/src/SortingAlgorithms/BubbleSort.js"],"names":["getBubbleSortAnimations","array","animations","length","bubbleSortHelper","endIndex","i","j","push","swappedVal"],"mappings":"AAAA,MAAO,SAASA,CAAAA,uBAAT,CAAiCC,KAAjC,CAAwC,CAC7C,GAAMC,CAAAA,UAAU,CAAG,EAAnB,CACA,GAAID,KAAK,CAACE,MAAN,EAAgB,CAApB,CAAuB,MAAOF,CAAAA,KAAP,CACvB;AACAG,gBAAgB,CAACH,KAAD,CAAQA,KAAK,CAACE,MAAN,CAAe,CAAvB,CAA0BD,UAA1B,CAAhB,CACA,MAAOA,CAAAA,UAAP,CACD,CAED,QAASE,CAAAA,gBAAT,CAA0BH,KAA1B,CAAiCI,QAAjC,CAA2CH,UAA3C,CAAuD,CACrD,IAAK,GAAII,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,QAApB,CAA8BC,CAAC,EAA/B,CAAmC,CACjC,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGF,QAAQ,CAAGC,CAA/B,CAAkCC,CAAC,EAAnC,CAAuC,CACrCL,UAAU,CAACM,IAAX,CAAgB,CAACD,CAAD,CAAIA,CAAC,CAAG,CAAR,CAAhB,EACAL,UAAU,CAACM,IAAX,CAAgB,CAACD,CAAD,CAAIA,CAAC,CAAG,CAAR,CAAhB,EACA;AACA,GAAIN,KAAK,CAACM,CAAD,CAAL,CAAWN,KAAK,CAACM,CAAC,CAAG,CAAL,CAApB,CAA6B,CAC3B,GAAIE,CAAAA,UAAU,CAAGR,KAAK,CAACM,CAAD,CAAtB,CAEAL,UAAU,CAACM,IAAX,CAAgB,CAACD,CAAD,CAAIN,KAAK,CAACM,CAAC,CAAG,CAAL,CAAT,CAAhB,EACAN,KAAK,CAACM,CAAD,CAAL,CAAWN,KAAK,CAACM,CAAC,CAAG,CAAL,CAAhB,CACAL,UAAU,CAACM,IAAX,CAAgB,CAACD,CAAC,CAAG,CAAL,CAAQE,UAAR,CAAhB,EACAR,KAAK,CAACM,CAAC,CAAG,CAAL,CAAL,CAAeE,UAAf,CACD,CAPD,IAOO,CACLP,UAAU,CAACM,IAAX,CAAgB,CAACD,CAAD,CAAIN,KAAK,CAACM,CAAD,CAAT,CAAhB,EACAL,UAAU,CAACM,IAAX,CAAgB,CAACD,CAAC,CAAG,CAAL,CAAQN,KAAK,CAACM,CAAC,CAAG,CAAL,CAAb,CAAhB,EACD,CACF,CACF,CACF","sourcesContent":["export function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  //const auxiliaryArray = array.slice();\r\n  bubbleSortHelper(array, array.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction bubbleSortHelper(array, endIndex, animations) {\r\n  for (let i = 0; i < endIndex; i++) {\r\n    for (let j = 0; j < endIndex - i; j++) {\r\n      animations.push([j, j + 1]);\r\n      animations.push([j, j + 1]);\r\n      // swap array[j+1] with arr[i+1] if adjacent is larger\r\n      if (array[j] > array[j + 1]) {\r\n        let swappedVal = array[j];\r\n\r\n        animations.push([j, array[j + 1]]);\r\n        array[j] = array[j + 1];\r\n        animations.push([j + 1, swappedVal]);\r\n        array[j + 1] = swappedVal;\r\n      } else {\r\n        animations.push([j, array[j]]);\r\n        animations.push([j + 1, array[j + 1]]);\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}